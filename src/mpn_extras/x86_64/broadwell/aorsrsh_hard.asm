dnl
dnl Copyright (C) 2024 Albin Ahlb√§ck
dnl
dnl This file is part of FLINT.
dnl
dnl FLINT is free software: you can redistribute it and/or modify it under
dnl the terms of the GNU Lesser General Public License (LGPL) as published
dnl by the Free Software Foundation; either version 3 of the License, or
dnl (at your option) any later version.  See <https://www.gnu.org/licenses/>.
dnl

include(`config.m4')

define(`rp',  `%rdi')
define(`ap',  `%rsi')
define(`bp',  `%rdx')
define(`cnt', `%rcx')

define(`tnc', `%r8')
define(`sx', `%rax')

define(`s0', `%r9')
define(`s1', `%r10')
define(`s2', `%r11')
define(`s3', `%rbx')

dnl From n = 2 onwards, these are generated by `dev/gen_x86_aorsrsh.jl'.
dnl However, flint_mpn_subrsh_2 is touched up afterwards.

dnl r <- a +/- 2^n b
dnl
dnl For 0 <= i < n - 1, we have
dnl
dnl     r_{i} = a_{i} +/- (b_{i} >> n + b_{i + 1} << (64 - n)),
dnl
dnl and
dnl
dnl     r_{n - 1} = a_{n - 1} +/- (b_{n - 1} >> n).

dnl The idea is the following:
dnl
dnl Assume that bp[i] is loaded in a register b0.
dnl
dnl t = b0 >> n		C shrx
dnl b1 = bp[i + 1]	C mov, and fullfills assumption for next iteration
dnl s = b1 << (64 - n)	C shlx
dnl s = s + t		C lea, carry-less
dnl if OP = add, then
dnl   s += ap[i]	C adc
dnl   rp[i] = s		C mov
dnl else
dnl   u = ap[i]		C mov
dnl   u -= s		C sbb
dnl   rp[i] = u		C mov
dnl fi

dnl Non-optimized version.
dnl ifdef(blablablabla,`
dnl 	ALIGN(16)
dnl PROLOGUE(flint_mpn_aorsrsh_5)
dnl 	xor	tnc, tnc
dnl 	sub	cnt, tnc
dnl 	xor	R32(sx), R32(sx)
dnl 
dnl 	shrx	cnt, 0*8(bp), s0
dnl 	mov	1*8(bp), s1
dnl 	shlx	tnc, s1, s2
dnl 	lea	(s0, s2), s2
dnl ifelse(OP,`add',`
dnl 	add	0*8(ap), s2
dnl 	mov	s2, 0*8(rp)
dnl ',`
dnl 	mov	0*8(ap), s0
dnl 	sub	s2, s0
dnl 	mov	s0, 0*8(rp)
dnl ')
dnl 
dnl 	shrx	cnt, s1, s0
dnl 	mov	2*8(bp), s1
dnl 	shlx	tnc, s1, s2
dnl 	lea	(s0, s2), s2
dnl ifelse(OP,`add',`
dnl 	adc	1*8(ap), s2
dnl 	mov	s2, 1*8(rp)
dnl ',`
dnl 	mov	1*8(ap), s0
dnl 	sbb	s2, s0
dnl 	mov	s0, 1*8(rp)
dnl ')
dnl 
dnl 	shrx	cnt, s1, s0
dnl 	mov	3*8(bp), s1
dnl 	shlx	tnc, s1, s2
dnl 	lea	(s0, s2), s2
dnl ifelse(OP,`add',`
dnl 	adc	2*8(ap), s2
dnl 	mov	s2, 2*8(rp)
dnl ',`
dnl 	mov	2*8(ap), s0
dnl 	sbb	s2, s0
dnl 	mov	s0, 2*8(rp)
dnl ')
dnl 
dnl 	shrx	cnt, s1, s0
dnl 	mov	4*8(bp), s1
dnl 	shlx	tnc, s1, s2
dnl 	lea	(s0, s2), s2
dnl ifelse(OP,`add',`
dnl 	adc	3*8(ap), s2
dnl 	mov	s2, 3*8(rp)
dnl ',`
dnl 	mov	3*8(ap), s0
dnl 	sbb	s2, s0
dnl 	mov	s0, 3*8(rp)
dnl ')
dnl 
dnl 	shrx	cnt, s1, s0
dnl ifelse(OP,`add',`
dnl 	adc	4*8(ap), s0
dnl 	mov	s0, 4*8(rp)
dnl ',`
dnl 	mov	4*8(ap), s2
dnl 	sbb	s0, s2
dnl 	mov	s2, 4*8(rp)
dnl ')
dnl 
dnl 	setc	R8(sx)
dnl 	ret
dnl EPILOGUE()
dnl ')

	TEXT
	
	ALIGN(16)
PROLOGUE(flint_mpn_addrsh_1)
	shrx	cnt, 0*8(bp), s0
	xor	R32(sx), R32(sx)
	add	0*8(ap), s0
	mov	s0, 0*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_addrsh_2)
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	add	0*8(ap), s2
	mov	s2, 0*8(rp)
	adc	1*8(ap), s1
	mov	s1, 1*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_addrsh_3)
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	add	0*8(ap), s2
	mov	s2, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	adc	1*8(ap), s2
	mov	s2, 1*8(rp)
	adc	2*8(ap), s1
	mov	s1, 2*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_addrsh_4)
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	add	0*8(ap), s2
	mov	s2, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	3*8(bp), s1
	adc	1*8(ap), s2
	mov	s2, 1*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	adc	2*8(ap), s2
	mov	s2, 2*8(rp)
	adc	3*8(ap), s1
	mov	s1, 3*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_addrsh_5)
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	add	0*8(ap), s2
	mov	s2, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	3*8(bp), s1
	adc	1*8(ap), s2
	mov	s2, 1*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	4*8(bp), s1
	adc	2*8(ap), s2
	mov	s2, 2*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	adc	3*8(ap), s2
	mov	s2, 3*8(rp)
	adc	4*8(ap), s1
	mov	s1, 4*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_addrsh_6)
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	add	0*8(ap), s2
	mov	s2, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	3*8(bp), s1
	adc	1*8(ap), s2
	mov	s2, 1*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	4*8(bp), s1
	adc	2*8(ap), s2
	mov	s2, 2*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	5*8(bp), s1
	adc	3*8(ap), s2
	mov	s2, 3*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	adc	4*8(ap), s2
	mov	s2, 4*8(rp)
	adc	5*8(ap), s1
	mov	s1, 5*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_addrsh_7)
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	add	0*8(ap), s2
	mov	s2, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	3*8(bp), s1
	adc	1*8(ap), s2
	mov	s2, 1*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	4*8(bp), s1
	adc	2*8(ap), s2
	mov	s2, 2*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	5*8(bp), s1
	adc	3*8(ap), s2
	mov	s2, 3*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	6*8(bp), s1
	adc	4*8(ap), s2
	mov	s2, 4*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	adc	5*8(ap), s2
	mov	s2, 5*8(rp)
	adc	6*8(ap), s1
	mov	s1, 6*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_addrsh_8)
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	add	0*8(ap), s2
	mov	s2, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	3*8(bp), s1
	adc	1*8(ap), s2
	mov	s2, 1*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	4*8(bp), s1
	adc	2*8(ap), s2
	mov	s2, 2*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	5*8(bp), s1
	adc	3*8(ap), s2
	mov	s2, 3*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	6*8(bp), s1
	adc	4*8(ap), s2
	mov	s2, 4*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	7*8(bp), s1
	adc	5*8(ap), s2
	mov	s2, 5*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	adc	6*8(ap), s2
	mov	s2, 6*8(rp)
	adc	7*8(ap), s1
	mov	s1, 7*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_addrsh_9)
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	add	0*8(ap), s2
	mov	s2, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	3*8(bp), s1
	adc	1*8(ap), s2
	mov	s2, 1*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	4*8(bp), s1
	adc	2*8(ap), s2
	mov	s2, 2*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	5*8(bp), s1
	adc	3*8(ap), s2
	mov	s2, 3*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	6*8(bp), s1
	adc	4*8(ap), s2
	mov	s2, 4*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	7*8(bp), s1
	adc	5*8(ap), s2
	mov	s2, 5*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	8*8(bp), s1
	adc	6*8(ap), s2
	mov	s2, 6*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	adc	7*8(ap), s2
	mov	s2, 7*8(rp)
	adc	8*8(ap), s1
	mov	s1, 8*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_addrsh_10)
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	add	0*8(ap), s2
	mov	s2, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	3*8(bp), s1
	adc	1*8(ap), s2
	mov	s2, 1*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	4*8(bp), s1
	adc	2*8(ap), s2
	mov	s2, 2*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	5*8(bp), s1
	adc	3*8(ap), s2
	mov	s2, 3*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	6*8(bp), s1
	adc	4*8(ap), s2
	mov	s2, 4*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	7*8(bp), s1
	adc	5*8(ap), s2
	mov	s2, 5*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	8*8(bp), s1
	adc	6*8(ap), s2
	mov	s2, 6*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	9*8(bp), s1
	adc	7*8(ap), s2
	mov	s2, 7*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	adc	8*8(ap), s2
	mov	s2, 8*8(rp)
	adc	9*8(ap), s1
	mov	s1, 9*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_addrsh_11)
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	add	0*8(ap), s2
	mov	s2, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	3*8(bp), s1
	adc	1*8(ap), s2
	mov	s2, 1*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	4*8(bp), s1
	adc	2*8(ap), s2
	mov	s2, 2*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	5*8(bp), s1
	adc	3*8(ap), s2
	mov	s2, 3*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	6*8(bp), s1
	adc	4*8(ap), s2
	mov	s2, 4*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	7*8(bp), s1
	adc	5*8(ap), s2
	mov	s2, 5*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	8*8(bp), s1
	adc	6*8(ap), s2
	mov	s2, 6*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	9*8(bp), s1
	adc	7*8(ap), s2
	mov	s2, 7*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	10*8(bp), s1
	adc	8*8(ap), s2
	mov	s2, 8*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	adc	9*8(ap), s2
	mov	s2, 9*8(rp)
	adc	10*8(ap), s1
	mov	s1, 10*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_addrsh_12)
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	add	0*8(ap), s2
	mov	s2, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	3*8(bp), s1
	adc	1*8(ap), s2
	mov	s2, 1*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	4*8(bp), s1
	adc	2*8(ap), s2
	mov	s2, 2*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	5*8(bp), s1
	adc	3*8(ap), s2
	mov	s2, 3*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	6*8(bp), s1
	adc	4*8(ap), s2
	mov	s2, 4*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	7*8(bp), s1
	adc	5*8(ap), s2
	mov	s2, 5*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	8*8(bp), s1
	adc	6*8(ap), s2
	mov	s2, 6*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	9*8(bp), s1
	adc	7*8(ap), s2
	mov	s2, 7*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	10*8(bp), s1
	adc	8*8(ap), s2
	mov	s2, 8*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	11*8(bp), s1
	adc	9*8(ap), s2
	mov	s2, 9*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	adc	10*8(ap), s2
	mov	s2, 10*8(rp)
	adc	11*8(ap), s1
	mov	s1, 11*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_addrsh_13)
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	add	0*8(ap), s2
	mov	s2, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	3*8(bp), s1
	adc	1*8(ap), s2
	mov	s2, 1*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	4*8(bp), s1
	adc	2*8(ap), s2
	mov	s2, 2*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	5*8(bp), s1
	adc	3*8(ap), s2
	mov	s2, 3*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	6*8(bp), s1
	adc	4*8(ap), s2
	mov	s2, 4*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	7*8(bp), s1
	adc	5*8(ap), s2
	mov	s2, 5*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	8*8(bp), s1
	adc	6*8(ap), s2
	mov	s2, 6*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	9*8(bp), s1
	adc	7*8(ap), s2
	mov	s2, 7*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	10*8(bp), s1
	adc	8*8(ap), s2
	mov	s2, 8*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	11*8(bp), s1
	adc	9*8(ap), s2
	mov	s2, 9*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	12*8(bp), s1
	adc	10*8(ap), s2
	mov	s2, 10*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	adc	11*8(ap), s2
	mov	s2, 11*8(rp)
	adc	12*8(ap), s1
	mov	s1, 12*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_addrsh_14)
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	add	0*8(ap), s2
	mov	s2, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	3*8(bp), s1
	adc	1*8(ap), s2
	mov	s2, 1*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	4*8(bp), s1
	adc	2*8(ap), s2
	mov	s2, 2*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	5*8(bp), s1
	adc	3*8(ap), s2
	mov	s2, 3*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	6*8(bp), s1
	adc	4*8(ap), s2
	mov	s2, 4*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	7*8(bp), s1
	adc	5*8(ap), s2
	mov	s2, 5*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	8*8(bp), s1
	adc	6*8(ap), s2
	mov	s2, 6*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	9*8(bp), s1
	adc	7*8(ap), s2
	mov	s2, 7*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	10*8(bp), s1
	adc	8*8(ap), s2
	mov	s2, 8*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	11*8(bp), s1
	adc	9*8(ap), s2
	mov	s2, 9*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	12*8(bp), s1
	adc	10*8(ap), s2
	mov	s2, 10*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	13*8(bp), s1
	adc	11*8(ap), s2
	mov	s2, 11*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	adc	12*8(ap), s2
	mov	s2, 12*8(rp)
	adc	13*8(ap), s1
	mov	s1, 13*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_addrsh_15)
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	add	0*8(ap), s2
	mov	s2, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	3*8(bp), s1
	adc	1*8(ap), s2
	mov	s2, 1*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	4*8(bp), s1
	adc	2*8(ap), s2
	mov	s2, 2*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	5*8(bp), s1
	adc	3*8(ap), s2
	mov	s2, 3*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	6*8(bp), s1
	adc	4*8(ap), s2
	mov	s2, 4*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	7*8(bp), s1
	adc	5*8(ap), s2
	mov	s2, 5*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	8*8(bp), s1
	adc	6*8(ap), s2
	mov	s2, 6*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	9*8(bp), s1
	adc	7*8(ap), s2
	mov	s2, 7*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	10*8(bp), s1
	adc	8*8(ap), s2
	mov	s2, 8*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	11*8(bp), s1
	adc	9*8(ap), s2
	mov	s2, 9*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	12*8(bp), s1
	adc	10*8(ap), s2
	mov	s2, 10*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	13*8(bp), s1
	adc	11*8(ap), s2
	mov	s2, 11*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	14*8(bp), s1
	adc	12*8(ap), s2
	mov	s2, 12*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	adc	13*8(ap), s2
	mov	s2, 13*8(rp)
	adc	14*8(ap), s1
	mov	s1, 14*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_addrsh_16)
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	add	0*8(ap), s2
	mov	s2, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	3*8(bp), s1
	adc	1*8(ap), s2
	mov	s2, 1*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	4*8(bp), s1
	adc	2*8(ap), s2
	mov	s2, 2*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	5*8(bp), s1
	adc	3*8(ap), s2
	mov	s2, 3*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	6*8(bp), s1
	adc	4*8(ap), s2
	mov	s2, 4*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	7*8(bp), s1
	adc	5*8(ap), s2
	mov	s2, 5*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	8*8(bp), s1
	adc	6*8(ap), s2
	mov	s2, 6*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	9*8(bp), s1
	adc	7*8(ap), s2
	mov	s2, 7*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	10*8(bp), s1
	adc	8*8(ap), s2
	mov	s2, 8*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	11*8(bp), s1
	adc	9*8(ap), s2
	mov	s2, 9*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	12*8(bp), s1
	adc	10*8(ap), s2
	mov	s2, 10*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	13*8(bp), s1
	adc	11*8(ap), s2
	mov	s2, 11*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	14*8(bp), s1
	adc	12*8(ap), s2
	mov	s2, 12*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	15*8(bp), s1
	adc	13*8(ap), s2
	mov	s2, 13*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	adc	14*8(ap), s2
	mov	s2, 14*8(rp)
	adc	15*8(ap), s1
	mov	s1, 15*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_subrsh_1)
	shrx	cnt, 0*8(bp), s0
	xor	R32(sx), R32(sx)
	mov	0*8(ap), s1
	sub	s0, s1
	mov	s1, 0*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

dnl Modified to avoid pushing and popping s3
	ALIGN(16)
PROLOGUE(flint_mpn_subrsh_2)
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	mov	0*8(ap), tnc
	sub	s2, tnc
	mov	tnc, 0*8(rp)
	mov	1*8(ap), s0
	sbb	s1, s0
	mov	s0, 1*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_subrsh_3)
	push	s3
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	mov	0*8(ap), s3
	sub	s2, s3
	mov	s3, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	mov	1*8(ap), s3
	sbb	s2, s3
	mov	s3, 1*8(rp)
	mov	2*8(ap), s0
	sbb	s1, s0
	mov	s0, 2*8(rp)
	pop	s3
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_subrsh_4)
	push	s3
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	mov	0*8(ap), s3
	sub	s2, s3
	mov	s3, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	3*8(bp), s1
	mov	1*8(ap), s3
	sbb	s2, s3
	mov	s3, 1*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	mov	2*8(ap), s3
	sbb	s2, s3
	mov	s3, 2*8(rp)
	mov	3*8(ap), s0
	sbb	s1, s0
	mov	s0, 3*8(rp)
	pop	s3
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_subrsh_5)
	push	s3
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	mov	0*8(ap), s3
	sub	s2, s3
	mov	s3, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	3*8(bp), s1
	mov	1*8(ap), s3
	sbb	s2, s3
	mov	s3, 1*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	4*8(bp), s1
	mov	2*8(ap), s3
	sbb	s2, s3
	mov	s3, 2*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	mov	3*8(ap), s3
	sbb	s2, s3
	mov	s3, 3*8(rp)
	mov	4*8(ap), s0
	sbb	s1, s0
	mov	s0, 4*8(rp)
	pop	s3
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_subrsh_6)
	push	s3
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	mov	0*8(ap), s3
	sub	s2, s3
	mov	s3, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	3*8(bp), s1
	mov	1*8(ap), s3
	sbb	s2, s3
	mov	s3, 1*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	4*8(bp), s1
	mov	2*8(ap), s3
	sbb	s2, s3
	mov	s3, 2*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	5*8(bp), s1
	mov	3*8(ap), s3
	sbb	s2, s3
	mov	s3, 3*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	mov	4*8(ap), s3
	sbb	s2, s3
	mov	s3, 4*8(rp)
	mov	5*8(ap), s0
	sbb	s1, s0
	mov	s0, 5*8(rp)
	pop	s3
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_subrsh_7)
	push	s3
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	mov	0*8(ap), s3
	sub	s2, s3
	mov	s3, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	3*8(bp), s1
	mov	1*8(ap), s3
	sbb	s2, s3
	mov	s3, 1*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	4*8(bp), s1
	mov	2*8(ap), s3
	sbb	s2, s3
	mov	s3, 2*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	5*8(bp), s1
	mov	3*8(ap), s3
	sbb	s2, s3
	mov	s3, 3*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	6*8(bp), s1
	mov	4*8(ap), s3
	sbb	s2, s3
	mov	s3, 4*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	mov	5*8(ap), s3
	sbb	s2, s3
	mov	s3, 5*8(rp)
	mov	6*8(ap), s0
	sbb	s1, s0
	mov	s0, 6*8(rp)
	pop	s3
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_subrsh_8)
	push	s3
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	mov	0*8(ap), s3
	sub	s2, s3
	mov	s3, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	3*8(bp), s1
	mov	1*8(ap), s3
	sbb	s2, s3
	mov	s3, 1*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	4*8(bp), s1
	mov	2*8(ap), s3
	sbb	s2, s3
	mov	s3, 2*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	5*8(bp), s1
	mov	3*8(ap), s3
	sbb	s2, s3
	mov	s3, 3*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	6*8(bp), s1
	mov	4*8(ap), s3
	sbb	s2, s3
	mov	s3, 4*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	7*8(bp), s1
	mov	5*8(ap), s3
	sbb	s2, s3
	mov	s3, 5*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	mov	6*8(ap), s3
	sbb	s2, s3
	mov	s3, 6*8(rp)
	mov	7*8(ap), s0
	sbb	s1, s0
	mov	s0, 7*8(rp)
	pop	s3
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_subrsh_9)
	push	s3
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	mov	0*8(ap), s3
	sub	s2, s3
	mov	s3, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	3*8(bp), s1
	mov	1*8(ap), s3
	sbb	s2, s3
	mov	s3, 1*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	4*8(bp), s1
	mov	2*8(ap), s3
	sbb	s2, s3
	mov	s3, 2*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	5*8(bp), s1
	mov	3*8(ap), s3
	sbb	s2, s3
	mov	s3, 3*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	6*8(bp), s1
	mov	4*8(ap), s3
	sbb	s2, s3
	mov	s3, 4*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	7*8(bp), s1
	mov	5*8(ap), s3
	sbb	s2, s3
	mov	s3, 5*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	8*8(bp), s1
	mov	6*8(ap), s3
	sbb	s2, s3
	mov	s3, 6*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	mov	7*8(ap), s3
	sbb	s2, s3
	mov	s3, 7*8(rp)
	mov	8*8(ap), s0
	sbb	s1, s0
	mov	s0, 8*8(rp)
	pop	s3
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_subrsh_10)
	push	s3
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	mov	0*8(ap), s3
	sub	s2, s3
	mov	s3, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	3*8(bp), s1
	mov	1*8(ap), s3
	sbb	s2, s3
	mov	s3, 1*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	4*8(bp), s1
	mov	2*8(ap), s3
	sbb	s2, s3
	mov	s3, 2*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	5*8(bp), s1
	mov	3*8(ap), s3
	sbb	s2, s3
	mov	s3, 3*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	6*8(bp), s1
	mov	4*8(ap), s3
	sbb	s2, s3
	mov	s3, 4*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	7*8(bp), s1
	mov	5*8(ap), s3
	sbb	s2, s3
	mov	s3, 5*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	8*8(bp), s1
	mov	6*8(ap), s3
	sbb	s2, s3
	mov	s3, 6*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	9*8(bp), s1
	mov	7*8(ap), s3
	sbb	s2, s3
	mov	s3, 7*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	mov	8*8(ap), s3
	sbb	s2, s3
	mov	s3, 8*8(rp)
	mov	9*8(ap), s0
	sbb	s1, s0
	mov	s0, 9*8(rp)
	pop	s3
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_subrsh_11)
	push	s3
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	mov	0*8(ap), s3
	sub	s2, s3
	mov	s3, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	3*8(bp), s1
	mov	1*8(ap), s3
	sbb	s2, s3
	mov	s3, 1*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	4*8(bp), s1
	mov	2*8(ap), s3
	sbb	s2, s3
	mov	s3, 2*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	5*8(bp), s1
	mov	3*8(ap), s3
	sbb	s2, s3
	mov	s3, 3*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	6*8(bp), s1
	mov	4*8(ap), s3
	sbb	s2, s3
	mov	s3, 4*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	7*8(bp), s1
	mov	5*8(ap), s3
	sbb	s2, s3
	mov	s3, 5*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	8*8(bp), s1
	mov	6*8(ap), s3
	sbb	s2, s3
	mov	s3, 6*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	9*8(bp), s1
	mov	7*8(ap), s3
	sbb	s2, s3
	mov	s3, 7*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	10*8(bp), s1
	mov	8*8(ap), s3
	sbb	s2, s3
	mov	s3, 8*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	mov	9*8(ap), s3
	sbb	s2, s3
	mov	s3, 9*8(rp)
	mov	10*8(ap), s0
	sbb	s1, s0
	mov	s0, 10*8(rp)
	pop	s3
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_subrsh_12)
	push	s3
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	mov	0*8(ap), s3
	sub	s2, s3
	mov	s3, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	3*8(bp), s1
	mov	1*8(ap), s3
	sbb	s2, s3
	mov	s3, 1*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	4*8(bp), s1
	mov	2*8(ap), s3
	sbb	s2, s3
	mov	s3, 2*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	5*8(bp), s1
	mov	3*8(ap), s3
	sbb	s2, s3
	mov	s3, 3*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	6*8(bp), s1
	mov	4*8(ap), s3
	sbb	s2, s3
	mov	s3, 4*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	7*8(bp), s1
	mov	5*8(ap), s3
	sbb	s2, s3
	mov	s3, 5*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	8*8(bp), s1
	mov	6*8(ap), s3
	sbb	s2, s3
	mov	s3, 6*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	9*8(bp), s1
	mov	7*8(ap), s3
	sbb	s2, s3
	mov	s3, 7*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	10*8(bp), s1
	mov	8*8(ap), s3
	sbb	s2, s3
	mov	s3, 8*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	11*8(bp), s1
	mov	9*8(ap), s3
	sbb	s2, s3
	mov	s3, 9*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	mov	10*8(ap), s3
	sbb	s2, s3
	mov	s3, 10*8(rp)
	mov	11*8(ap), s0
	sbb	s1, s0
	mov	s0, 11*8(rp)
	pop	s3
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_subrsh_13)
	push	s3
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	mov	0*8(ap), s3
	sub	s2, s3
	mov	s3, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	3*8(bp), s1
	mov	1*8(ap), s3
	sbb	s2, s3
	mov	s3, 1*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	4*8(bp), s1
	mov	2*8(ap), s3
	sbb	s2, s3
	mov	s3, 2*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	5*8(bp), s1
	mov	3*8(ap), s3
	sbb	s2, s3
	mov	s3, 3*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	6*8(bp), s1
	mov	4*8(ap), s3
	sbb	s2, s3
	mov	s3, 4*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	7*8(bp), s1
	mov	5*8(ap), s3
	sbb	s2, s3
	mov	s3, 5*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	8*8(bp), s1
	mov	6*8(ap), s3
	sbb	s2, s3
	mov	s3, 6*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	9*8(bp), s1
	mov	7*8(ap), s3
	sbb	s2, s3
	mov	s3, 7*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	10*8(bp), s1
	mov	8*8(ap), s3
	sbb	s2, s3
	mov	s3, 8*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	11*8(bp), s1
	mov	9*8(ap), s3
	sbb	s2, s3
	mov	s3, 9*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	12*8(bp), s1
	mov	10*8(ap), s3
	sbb	s2, s3
	mov	s3, 10*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	mov	11*8(ap), s3
	sbb	s2, s3
	mov	s3, 11*8(rp)
	mov	12*8(ap), s0
	sbb	s1, s0
	mov	s0, 12*8(rp)
	pop	s3
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_subrsh_14)
	push	s3
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	mov	0*8(ap), s3
	sub	s2, s3
	mov	s3, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	3*8(bp), s1
	mov	1*8(ap), s3
	sbb	s2, s3
	mov	s3, 1*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	4*8(bp), s1
	mov	2*8(ap), s3
	sbb	s2, s3
	mov	s3, 2*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	5*8(bp), s1
	mov	3*8(ap), s3
	sbb	s2, s3
	mov	s3, 3*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	6*8(bp), s1
	mov	4*8(ap), s3
	sbb	s2, s3
	mov	s3, 4*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	7*8(bp), s1
	mov	5*8(ap), s3
	sbb	s2, s3
	mov	s3, 5*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	8*8(bp), s1
	mov	6*8(ap), s3
	sbb	s2, s3
	mov	s3, 6*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	9*8(bp), s1
	mov	7*8(ap), s3
	sbb	s2, s3
	mov	s3, 7*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	10*8(bp), s1
	mov	8*8(ap), s3
	sbb	s2, s3
	mov	s3, 8*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	11*8(bp), s1
	mov	9*8(ap), s3
	sbb	s2, s3
	mov	s3, 9*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	12*8(bp), s1
	mov	10*8(ap), s3
	sbb	s2, s3
	mov	s3, 10*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	13*8(bp), s1
	mov	11*8(ap), s3
	sbb	s2, s3
	mov	s3, 11*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	mov	12*8(ap), s3
	sbb	s2, s3
	mov	s3, 12*8(rp)
	mov	13*8(ap), s0
	sbb	s1, s0
	mov	s0, 13*8(rp)
	pop	s3
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_subrsh_15)
	push	s3
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	mov	0*8(ap), s3
	sub	s2, s3
	mov	s3, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	3*8(bp), s1
	mov	1*8(ap), s3
	sbb	s2, s3
	mov	s3, 1*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	4*8(bp), s1
	mov	2*8(ap), s3
	sbb	s2, s3
	mov	s3, 2*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	5*8(bp), s1
	mov	3*8(ap), s3
	sbb	s2, s3
	mov	s3, 3*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	6*8(bp), s1
	mov	4*8(ap), s3
	sbb	s2, s3
	mov	s3, 4*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	7*8(bp), s1
	mov	5*8(ap), s3
	sbb	s2, s3
	mov	s3, 5*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	8*8(bp), s1
	mov	6*8(ap), s3
	sbb	s2, s3
	mov	s3, 6*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	9*8(bp), s1
	mov	7*8(ap), s3
	sbb	s2, s3
	mov	s3, 7*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	10*8(bp), s1
	mov	8*8(ap), s3
	sbb	s2, s3
	mov	s3, 8*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	11*8(bp), s1
	mov	9*8(ap), s3
	sbb	s2, s3
	mov	s3, 9*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	12*8(bp), s1
	mov	10*8(ap), s3
	sbb	s2, s3
	mov	s3, 10*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	13*8(bp), s1
	mov	11*8(ap), s3
	sbb	s2, s3
	mov	s3, 11*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	14*8(bp), s1
	mov	12*8(ap), s3
	sbb	s2, s3
	mov	s3, 12*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	mov	13*8(ap), s3
	sbb	s2, s3
	mov	s3, 13*8(rp)
	mov	14*8(ap), s0
	sbb	s1, s0
	mov	s0, 14*8(rp)
	pop	s3
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_subrsh_16)
	push	s3
	xor	tnc, tnc
	sub	cnt, tnc
	xor	R32(sx), R32(sx)
	shrx	cnt, 0*8(bp), s0
	mov	1*8(bp), s1
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	2*8(bp), s1
	mov	0*8(ap), s3
	sub	s2, s3
	mov	s3, 0*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	3*8(bp), s1
	mov	1*8(ap), s3
	sbb	s2, s3
	mov	s3, 1*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	4*8(bp), s1
	mov	2*8(ap), s3
	sbb	s2, s3
	mov	s3, 2*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	5*8(bp), s1
	mov	3*8(ap), s3
	sbb	s2, s3
	mov	s3, 3*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	6*8(bp), s1
	mov	4*8(ap), s3
	sbb	s2, s3
	mov	s3, 4*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	7*8(bp), s1
	mov	5*8(ap), s3
	sbb	s2, s3
	mov	s3, 5*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	8*8(bp), s1
	mov	6*8(ap), s3
	sbb	s2, s3
	mov	s3, 6*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	9*8(bp), s1
	mov	7*8(ap), s3
	sbb	s2, s3
	mov	s3, 7*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	10*8(bp), s1
	mov	8*8(ap), s3
	sbb	s2, s3
	mov	s3, 8*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	11*8(bp), s1
	mov	9*8(ap), s3
	sbb	s2, s3
	mov	s3, 9*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	12*8(bp), s1
	mov	10*8(ap), s3
	sbb	s2, s3
	mov	s3, 10*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	13*8(bp), s1
	mov	11*8(ap), s3
	sbb	s2, s3
	mov	s3, 11*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	14*8(bp), s1
	mov	12*8(ap), s3
	sbb	s2, s3
	mov	s3, 12*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s0
	mov	15*8(bp), s1
	mov	13*8(ap), s3
	sbb	s2, s3
	mov	s3, 13*8(rp)
	shlx	tnc, s1, s2
	lea	(s0, s2), s2
	shrx	cnt, s1, s1
	mov	14*8(ap), s3
	sbb	s2, s3
	mov	s3, 14*8(rp)
	mov	15*8(ap), s0
	sbb	s1, s0
	mov	s0, 15*8(rp)
	pop	s3
	setc	R8(sx)
	ret
EPILOGUE()
