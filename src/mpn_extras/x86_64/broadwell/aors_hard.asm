dnl
dnl Copyright (C) 2024 Albin Ahlb√§ck
dnl
dnl This file is part of FLINT.
dnl
dnl FLINT is free software: you can redistribute it and/or modify it under
dnl the terms of the GNU Lesser General Public License (LGPL) as published
dnl by the Free Software Foundation; either version 3 of the License, or
dnl (at your option) any later version.  See <https://www.gnu.org/licenses/>.
dnl

include(`config.m4')

dnl Everything from n = 2 and onwards is generated by
dnl $topdir/dev/gen_x86_aors.jl.

define(`rp', `%rdi')
define(`ap', `%rsi')
define(`bp', `%rdx')

define(`sx', `%rax')
define(`s0', `%rcx')
define(`s1', `%r8')
define(`s2', `%r9')
define(`s3', `%r10')
define(`s4', `%r11')

define(ALL_AORS,`
	ALIGN(16)
PROLOGUE(flint_mpn_aors(1))
	mov	0*8(ap), s0
	xor	R32(sx), R32(sx)
	OP	0*8(bp), s0
	mov	s0, 0*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_aors(2))
	mov	0*8(ap), s0
	mov	1*8(ap), s1
	xor	R32(sx), R32(sx)
	OP	0*8(bp), s0
	mov	s0, 0*8(rp)
	OPC	1*8(bp), s1
	mov	s1, 1*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_aors(3))
	mov	0*8(ap), s0
	mov	1*8(ap), s1
	xor	R32(sx), R32(sx)
	OP	0*8(bp), s0
	mov	s0, 0*8(rp)
	mov	2*8(ap), s2
	OPC	1*8(bp), s1
	mov	s1, 1*8(rp)
	OPC	2*8(bp), s2
	mov	s2, 2*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_aors(4))
	mov	0*8(ap), s0
	mov	1*8(ap), s1
	xor	R32(sx), R32(sx)
	OP	0*8(bp), s0
	mov	s0, 0*8(rp)
	mov	2*8(ap), s2
	OPC	1*8(bp), s1
	mov	s1, 1*8(rp)
	mov	3*8(ap), s3
	OPC	2*8(bp), s2
	mov	s2, 2*8(rp)
	OPC	3*8(bp), s3
	mov	s3, 3*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_aors(5))
	mov	0*8(ap), s0
	mov	1*8(ap), s1
	xor	R32(sx), R32(sx)
	OP	0*8(bp), s0
	mov	s0, 0*8(rp)
	mov	2*8(ap), s2
	OPC	1*8(bp), s1
	mov	s1, 1*8(rp)
	mov	3*8(ap), s3
	OPC	2*8(bp), s2
	mov	s2, 2*8(rp)
	mov	4*8(ap), s4
	OPC	3*8(bp), s3
	mov	s3, 3*8(rp)
	OPC	4*8(bp), s4
	mov	s4, 4*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_aors(6))
	mov	0*8(ap), s0
	mov	1*8(ap), s1
	xor	R32(sx), R32(sx)
	OP	0*8(bp), s0
	mov	s0, 0*8(rp)
	mov	2*8(ap), s2
	OPC	1*8(bp), s1
	mov	s1, 1*8(rp)
	mov	3*8(ap), s3
	OPC	2*8(bp), s2
	mov	s2, 2*8(rp)
	mov	4*8(ap), s4
	OPC	3*8(bp), s3
	mov	s3, 3*8(rp)
	mov	5*8(ap), s0
	OPC	4*8(bp), s4
	mov	s4, 4*8(rp)
	OPC	5*8(bp), s0
	mov	s0, 5*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_aors(7))
	mov	0*8(ap), s0
	mov	1*8(ap), s1
	xor	R32(sx), R32(sx)
	OP	0*8(bp), s0
	mov	s0, 0*8(rp)
	mov	2*8(ap), s2
	OPC	1*8(bp), s1
	mov	s1, 1*8(rp)
	mov	3*8(ap), s3
	OPC	2*8(bp), s2
	mov	s2, 2*8(rp)
	mov	4*8(ap), s4
	OPC	3*8(bp), s3
	mov	s3, 3*8(rp)
	mov	5*8(ap), s0
	OPC	4*8(bp), s4
	mov	s4, 4*8(rp)
	mov	6*8(ap), s1
	OPC	5*8(bp), s0
	mov	s0, 5*8(rp)
	OPC	6*8(bp), s1
	mov	s1, 6*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_aors(8))
	mov	0*8(ap), s0
	mov	1*8(ap), s1
	xor	R32(sx), R32(sx)
	OP	0*8(bp), s0
	mov	s0, 0*8(rp)
	mov	2*8(ap), s2
	OPC	1*8(bp), s1
	mov	s1, 1*8(rp)
	mov	3*8(ap), s3
	OPC	2*8(bp), s2
	mov	s2, 2*8(rp)
	mov	4*8(ap), s4
	OPC	3*8(bp), s3
	mov	s3, 3*8(rp)
	mov	5*8(ap), s0
	OPC	4*8(bp), s4
	mov	s4, 4*8(rp)
	mov	6*8(ap), s1
	OPC	5*8(bp), s0
	mov	s0, 5*8(rp)
	mov	7*8(ap), s2
	OPC	6*8(bp), s1
	mov	s1, 6*8(rp)
	OPC	7*8(bp), s2
	mov	s2, 7*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_aors(9))
	mov	0*8(ap), s0
	mov	1*8(ap), s1
	xor	R32(sx), R32(sx)
	OP	0*8(bp), s0
	mov	s0, 0*8(rp)
	mov	2*8(ap), s2
	OPC	1*8(bp), s1
	mov	s1, 1*8(rp)
	mov	3*8(ap), s3
	OPC	2*8(bp), s2
	mov	s2, 2*8(rp)
	mov	4*8(ap), s4
	OPC	3*8(bp), s3
	mov	s3, 3*8(rp)
	mov	5*8(ap), s0
	OPC	4*8(bp), s4
	mov	s4, 4*8(rp)
	mov	6*8(ap), s1
	OPC	5*8(bp), s0
	mov	s0, 5*8(rp)
	mov	7*8(ap), s2
	OPC	6*8(bp), s1
	mov	s1, 6*8(rp)
	mov	8*8(ap), s3
	OPC	7*8(bp), s2
	mov	s2, 7*8(rp)
	OPC	8*8(bp), s3
	mov	s3, 8*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_aors(10))
	mov	0*8(ap), s0
	mov	1*8(ap), s1
	xor	R32(sx), R32(sx)
	OP	0*8(bp), s0
	mov	s0, 0*8(rp)
	mov	2*8(ap), s2
	OPC	1*8(bp), s1
	mov	s1, 1*8(rp)
	mov	3*8(ap), s3
	OPC	2*8(bp), s2
	mov	s2, 2*8(rp)
	mov	4*8(ap), s4
	OPC	3*8(bp), s3
	mov	s3, 3*8(rp)
	mov	5*8(ap), s0
	OPC	4*8(bp), s4
	mov	s4, 4*8(rp)
	mov	6*8(ap), s1
	OPC	5*8(bp), s0
	mov	s0, 5*8(rp)
	mov	7*8(ap), s2
	OPC	6*8(bp), s1
	mov	s1, 6*8(rp)
	mov	8*8(ap), s3
	OPC	7*8(bp), s2
	mov	s2, 7*8(rp)
	mov	9*8(ap), s4
	OPC	8*8(bp), s3
	mov	s3, 8*8(rp)
	OPC	9*8(bp), s4
	mov	s4, 9*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_aors(11))
	mov	0*8(ap), s0
	mov	1*8(ap), s1
	xor	R32(sx), R32(sx)
	OP	0*8(bp), s0
	mov	s0, 0*8(rp)
	mov	2*8(ap), s2
	OPC	1*8(bp), s1
	mov	s1, 1*8(rp)
	mov	3*8(ap), s3
	OPC	2*8(bp), s2
	mov	s2, 2*8(rp)
	mov	4*8(ap), s4
	OPC	3*8(bp), s3
	mov	s3, 3*8(rp)
	mov	5*8(ap), s0
	OPC	4*8(bp), s4
	mov	s4, 4*8(rp)
	mov	6*8(ap), s1
	OPC	5*8(bp), s0
	mov	s0, 5*8(rp)
	mov	7*8(ap), s2
	OPC	6*8(bp), s1
	mov	s1, 6*8(rp)
	mov	8*8(ap), s3
	OPC	7*8(bp), s2
	mov	s2, 7*8(rp)
	mov	9*8(ap), s4
	OPC	8*8(bp), s3
	mov	s3, 8*8(rp)
	mov	10*8(ap), s0
	OPC	9*8(bp), s4
	mov	s4, 9*8(rp)
	OPC	10*8(bp), s0
	mov	s0, 10*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_aors(12))
	mov	0*8(ap), s0
	mov	1*8(ap), s1
	xor	R32(sx), R32(sx)
	OP	0*8(bp), s0
	mov	s0, 0*8(rp)
	mov	2*8(ap), s2
	OPC	1*8(bp), s1
	mov	s1, 1*8(rp)
	mov	3*8(ap), s3
	OPC	2*8(bp), s2
	mov	s2, 2*8(rp)
	mov	4*8(ap), s4
	OPC	3*8(bp), s3
	mov	s3, 3*8(rp)
	mov	5*8(ap), s0
	OPC	4*8(bp), s4
	mov	s4, 4*8(rp)
	mov	6*8(ap), s1
	OPC	5*8(bp), s0
	mov	s0, 5*8(rp)
	mov	7*8(ap), s2
	OPC	6*8(bp), s1
	mov	s1, 6*8(rp)
	mov	8*8(ap), s3
	OPC	7*8(bp), s2
	mov	s2, 7*8(rp)
	mov	9*8(ap), s4
	OPC	8*8(bp), s3
	mov	s3, 8*8(rp)
	mov	10*8(ap), s0
	OPC	9*8(bp), s4
	mov	s4, 9*8(rp)
	mov	11*8(ap), s1
	OPC	10*8(bp), s0
	mov	s0, 10*8(rp)
	OPC	11*8(bp), s1
	mov	s1, 11*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_aors(13))
	mov	0*8(ap), s0
	mov	1*8(ap), s1
	xor	R32(sx), R32(sx)
	OP	0*8(bp), s0
	mov	s0, 0*8(rp)
	mov	2*8(ap), s2
	OPC	1*8(bp), s1
	mov	s1, 1*8(rp)
	mov	3*8(ap), s3
	OPC	2*8(bp), s2
	mov	s2, 2*8(rp)
	mov	4*8(ap), s4
	OPC	3*8(bp), s3
	mov	s3, 3*8(rp)
	mov	5*8(ap), s0
	OPC	4*8(bp), s4
	mov	s4, 4*8(rp)
	mov	6*8(ap), s1
	OPC	5*8(bp), s0
	mov	s0, 5*8(rp)
	mov	7*8(ap), s2
	OPC	6*8(bp), s1
	mov	s1, 6*8(rp)
	mov	8*8(ap), s3
	OPC	7*8(bp), s2
	mov	s2, 7*8(rp)
	mov	9*8(ap), s4
	OPC	8*8(bp), s3
	mov	s3, 8*8(rp)
	mov	10*8(ap), s0
	OPC	9*8(bp), s4
	mov	s4, 9*8(rp)
	mov	11*8(ap), s1
	OPC	10*8(bp), s0
	mov	s0, 10*8(rp)
	mov	12*8(ap), s2
	OPC	11*8(bp), s1
	mov	s1, 11*8(rp)
	OPC	12*8(bp), s2
	mov	s2, 12*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_aors(14))
	mov	0*8(ap), s0
	mov	1*8(ap), s1
	xor	R32(sx), R32(sx)
	OP	0*8(bp), s0
	mov	s0, 0*8(rp)
	mov	2*8(ap), s2
	OPC	1*8(bp), s1
	mov	s1, 1*8(rp)
	mov	3*8(ap), s3
	OPC	2*8(bp), s2
	mov	s2, 2*8(rp)
	mov	4*8(ap), s4
	OPC	3*8(bp), s3
	mov	s3, 3*8(rp)
	mov	5*8(ap), s0
	OPC	4*8(bp), s4
	mov	s4, 4*8(rp)
	mov	6*8(ap), s1
	OPC	5*8(bp), s0
	mov	s0, 5*8(rp)
	mov	7*8(ap), s2
	OPC	6*8(bp), s1
	mov	s1, 6*8(rp)
	mov	8*8(ap), s3
	OPC	7*8(bp), s2
	mov	s2, 7*8(rp)
	mov	9*8(ap), s4
	OPC	8*8(bp), s3
	mov	s3, 8*8(rp)
	mov	10*8(ap), s0
	OPC	9*8(bp), s4
	mov	s4, 9*8(rp)
	mov	11*8(ap), s1
	OPC	10*8(bp), s0
	mov	s0, 10*8(rp)
	mov	12*8(ap), s2
	OPC	11*8(bp), s1
	mov	s1, 11*8(rp)
	mov	13*8(ap), s3
	OPC	12*8(bp), s2
	mov	s2, 12*8(rp)
	OPC	13*8(bp), s3
	mov	s3, 13*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_aors(15))
	mov	0*8(ap), s0
	mov	1*8(ap), s1
	xor	R32(sx), R32(sx)
	OP	0*8(bp), s0
	mov	s0, 0*8(rp)
	mov	2*8(ap), s2
	OPC	1*8(bp), s1
	mov	s1, 1*8(rp)
	mov	3*8(ap), s3
	OPC	2*8(bp), s2
	mov	s2, 2*8(rp)
	mov	4*8(ap), s4
	OPC	3*8(bp), s3
	mov	s3, 3*8(rp)
	mov	5*8(ap), s0
	OPC	4*8(bp), s4
	mov	s4, 4*8(rp)
	mov	6*8(ap), s1
	OPC	5*8(bp), s0
	mov	s0, 5*8(rp)
	mov	7*8(ap), s2
	OPC	6*8(bp), s1
	mov	s1, 6*8(rp)
	mov	8*8(ap), s3
	OPC	7*8(bp), s2
	mov	s2, 7*8(rp)
	mov	9*8(ap), s4
	OPC	8*8(bp), s3
	mov	s3, 8*8(rp)
	mov	10*8(ap), s0
	OPC	9*8(bp), s4
	mov	s4, 9*8(rp)
	mov	11*8(ap), s1
	OPC	10*8(bp), s0
	mov	s0, 10*8(rp)
	mov	12*8(ap), s2
	OPC	11*8(bp), s1
	mov	s1, 11*8(rp)
	mov	13*8(ap), s3
	OPC	12*8(bp), s2
	mov	s2, 12*8(rp)
	mov	14*8(ap), s4
	OPC	13*8(bp), s3
	mov	s3, 13*8(rp)
	OPC	14*8(bp), s4
	mov	s4, 14*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()

	ALIGN(16)
PROLOGUE(flint_mpn_aors(16))
	mov	0*8(ap), s0
	mov	1*8(ap), s1
	xor	R32(sx), R32(sx)
	OP	0*8(bp), s0
	mov	s0, 0*8(rp)
	mov	2*8(ap), s2
	OPC	1*8(bp), s1
	mov	s1, 1*8(rp)
	mov	3*8(ap), s3
	OPC	2*8(bp), s2
	mov	s2, 2*8(rp)
	mov	4*8(ap), s4
	OPC	3*8(bp), s3
	mov	s3, 3*8(rp)
	mov	5*8(ap), s0
	OPC	4*8(bp), s4
	mov	s4, 4*8(rp)
	mov	6*8(ap), s1
	OPC	5*8(bp), s0
	mov	s0, 5*8(rp)
	mov	7*8(ap), s2
	OPC	6*8(bp), s1
	mov	s1, 6*8(rp)
	mov	8*8(ap), s3
	OPC	7*8(bp), s2
	mov	s2, 7*8(rp)
	mov	9*8(ap), s4
	OPC	8*8(bp), s3
	mov	s3, 8*8(rp)
	mov	10*8(ap), s0
	OPC	9*8(bp), s4
	mov	s4, 9*8(rp)
	mov	11*8(ap), s1
	OPC	10*8(bp), s0
	mov	s0, 10*8(rp)
	mov	12*8(ap), s2
	OPC	11*8(bp), s1
	mov	s1, 11*8(rp)
	mov	13*8(ap), s3
	OPC	12*8(bp), s2
	mov	s2, 12*8(rp)
	mov	14*8(ap), s4
	OPC	13*8(bp), s3
	mov	s3, 13*8(rp)
	mov	15*8(ap), s0
	OPC	14*8(bp), s4
	mov	s4, 14*8(rp)
	OPC	15*8(bp), s0
	mov	s0, 15*8(rp)
	setc	R8(sx)
	ret
EPILOGUE()
')

	TEXT
define(`flint_mpn_aors',`flint_mpn_add_$1')
define(`OP',`add')
define(`OPC',`adc')
ALL_AORS
undefine(`flint_mpn_aors')
undefine(`OP')
undefine(`OPC')

define(`flint_mpn_aors',`flint_mpn_sub_$1')
define(`OP',`sub')
define(`OPC',`sbb')
ALL_AORS
undefine(`flint_mpn_aors')
undefine(`OP')
undefine(`OPC')
